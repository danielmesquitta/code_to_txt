===== cmd/root.go =====
package cmd

import (
	"fmt"
	"os"

	"github.com/danielmesquitta/code_to_txt/internal/usecase"
	"github.com/spf13/cobra"
)

var rootCmd = &cobra.Command{
	Use:   "code_to_txt",
	Short: "Convert any folder with code files to a single text file with all the code separated by a separator.",
	Long:  `Convert any folder with code files to a single text file with all the code separated by a separator. Intended for creating txt files to provide to AI models for training or for directly sending it to ChatGPT API for generating code following codebase standards.`,

	Run: func(cmd *cobra.Command, args []string) {
		folderPath, err := cmd.Flags().GetString("path")
		if err != nil {
			fmt.Println(err)
			if err := cmd.Help(); err != nil {
				panic(err)
			}
			return
		}
		outputFilePath, err := cmd.Flags().GetString("output")
		if err != nil {
			fmt.Println(err)
			if err := cmd.Help(); err != nil {
				panic(err)
			}
			return
		}
		ignorePath, err := cmd.Flags().GetStringSlice("ignore")
		if err != nil {
			fmt.Println(err)
			if err := cmd.Help(); err != nil {
				panic(err)
			}
			return
		}
		err = usecase.ToTtx(folderPath, outputFilePath, usecase.ToTxtConfig{IgnorePaths: ignorePath})
		if err != nil {
			fmt.Println("Invalid command")
			if err := cmd.Help(); err != nil {
				panic(err)
			}
			return
		}
	},
}

func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	rootCmd.Flags().StringP("path", "p", "./", "Path to the folder with code files")
	rootCmd.Flags().StringP("output", "o", "output.txt", "Path to the output txt file")
	rootCmd.Flags().StringSliceP("ignore", "i", []string{".git", ".env"}, "Paths and files to ignore while converting to txt file")
}

===== go.mod =====
module github.com/danielmesquitta/code_to_txt

go 1.22.0

require (
	github.com/inconshreveable/mousetrap v1.1.0 // indirect
	github.com/spf13/cobra v1.8.0 // indirect
	github.com/spf13/pflag v1.0.5 // indirect
)

===== go.sum =====
github.com/cpuguy83/go-md2man/v2 v2.0.3/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=
github.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=
github.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
github.com/spf13/cobra v1.8.0 h1:7aJaZx1B85qltLMc546zn58BxxfZdR/W22ej9CFoEf0=
github.com/spf13/cobra v1.8.0/go.mod h1:WXLWApfZ71AjXPya3WOlMsY9yMs7YeiHhFVlvLyhcho=
github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=

===== internal/usecase/to_txt.go =====
package usecase

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

type ToTxtConfig struct {
	IgnorePaths []string
	Separator   string
}

func ToTtx(folderPath string, outputFilePath string, config ToTxtConfig) error {
	outputFile, err := os.Create(outputFilePath)
	if err != nil {
		return err
	}
	defer outputFile.Close()

	if config.Separator == "" {
		config.Separator = "===== %s =====\n"
	}

	var processFile = func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() || shouldIgnore(path, config.IgnorePaths) {
			return nil
		}
		content, err := os.ReadFile(path)
		if err != nil {
			return err
		}
		relativePath := strings.Replace(path, folderPath, "", 1)
		fmt.Println(path, folderPath, relativePath)
		separator := fmt.Sprintf(config.Separator, relativePath)
		if _, err := outputFile.WriteString(separator + string(content) + "\n"); err != nil {
			return err
		}
		return nil
	}

	err = filepath.Walk(folderPath, processFile)
	if err != nil {
		return err
	}

	return nil
}

func shouldIgnore(path string, ignore []string) bool {
	for _, ignorePath := range ignore {
		if strings.Contains(path, ignorePath) {
			return true
		}
	}
	return false
}

===== main.go =====
package main

import "github.com/danielmesquitta/code_to_txt/cmd"

func main() {
	cmd.Execute()
}

===== output.txt =====
===== cmd/root.go =====
package cmd

import (
	"fmt"
	"os"

	"github.com/danielmesquitta/code_to_txt/internal/usecase"
	"github.com/spf13/cobra"
)

var rootCmd = &cobra.Command{
	Use:   "code_to_txt",
	Short: "Convert any folder with code files to a single text file with all the code separated by a separator.",
	Long:  `Convert any folder with code files to a single text file with all the code separated by a separator. Intended for creating txt files to provide to AI models for training or for directly sending it to ChatGPT API for generating code following codebase standards.`,

	Run: func(cmd *cobra.Command, args []string) {
		folderPath, err := cmd.Flags().GetString("path")
		if err != nil {
			fmt.Println(err)
			if err := cmd.Help(); err != nil {
				panic(err)
			}
			return
		}
		outputFilePath, err := cmd.Flags().GetString("output")
		if err != nil {
			fmt.Println(err)
			if err := cmd.Help(); err != nil {
				panic(err)
			}
			return
		}
		ignorePath, err := cmd.Flags().GetStringSlice("ignore")
		if err != nil {
			fmt.Println(err)
			if err := cmd.Help(); err != nil {
				panic(err)
			}
			return
		}
		err = usecase.ToTtx(folderPath, outputFilePath, usecase.ToTxtConfig{IgnorePaths: ignorePath})
		if err != nil {
			fmt.Println("Invalid command")
			if err := cmd.Help(); err != nil {
				panic(err)
			}
			return
		}
	},
}

func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	rootCmd.Flags().StringP("path", "p", "./", "Path to the folder with code files")
	rootCmd.Flags().StringP("output", "o", "output.txt", "Path to the output txt file")
	rootCmd.Flags().StringSliceP("ignore", "i", []string{".git", ".env"}, "Paths and files to ignore while converting to txt file")
}

===== go.mod =====
module github.com/danielmesquitta/code_to_txt

go 1.22.0

require (
	github.com/inconshreveable/mousetrap v1.1.0 // indirect
	github.com/spf13/cobra v1.8.0 // indirect
	github.com/spf13/pflag v1.0.5 // indirect
)

===== go.sum =====
github.com/cpuguy83/go-md2man/v2 v2.0.3/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=
github.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=
github.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
github.com/spf13/cobra v1.8.0 h1:7aJaZx1B85qltLMc546zn58BxxfZdR/W22ej9CFoEf0=
github.com/spf13/cobra v1.8.0/go.mod h1:WXLWApfZ71AjXPya3WOlMsY9yMs7YeiHhFVlvLyhcho=
github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=

===== internal/usecase/to_txt.go =====
package usecase

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

type ToTxtConfig struct {
	IgnorePaths []string
	Separator   string
}

func ToTtx(folderPath string, outputFilePath string, config ToTxtConfig) error {
	outputFile, err := os.Create(outputFilePath)
	if err != nil {
		return err
	}
	defer outputFile.Close()

	if config.Separator == "" {
		config.Separator = "===== %s =====\n"
	}

	var processFile = func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() || shouldIgnore(path, config.IgnorePaths) {
			return nil
		}
		content, err := os.ReadFile(path)
		if err != nil {
			return err
		}
		relativePath := strings.Replace(path, folderPath, "", 1)
		fmt.Println(path, folderPath, relativePath)
		separator := fmt.Sprintf(config.Separator, relativePath)
		if _, err := outputFile.WriteString(separator + string(content) + "\n"); err != nil {
			return err
		}
		return nil
	}

	err = filepath.Walk(folderPath, processFile)
	if err != nil {
		return err
	}

	return nil
}

func shouldIgnore(path string, ignore []string) bool {
	for _, ignorePath := range ignore {
		if strings.Contains(path, ignorePath) {
			return true
		}
	}
	return false
}

===== main.go =====
package main

import "github.com/danielmesquitta/code_to_txt/cmd"

func main() {
	cmd.Execute()
}


